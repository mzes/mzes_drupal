<?php

/**
 * Implements hook_install().
 *
 * Perform actions to set up the site for this profile.
 */
function mzes_install() {
  mzes_add_default_text_formats_and_perms();

  // Allow visitor account creation with administrative approval.
  variable_set('user_register', USER_REGISTER_VISITORS_ADMINISTRATIVE_APPROVAL);

  mzes_enable_admin_theme ();

  // set various system variables
  variable_set('pathauto_node_pattern', '[node:type]/[node:title]');
  variable_set('pathauto_punctuation_underscore', '1');
  //variable_set('statistics_count_content_views', '1');

}


/**
* Set Rubik as the Admin Theme
*/
function mzes_enable_admin_theme () {
  // Enable the admin theme.
  db_update('system')
    ->fields(array('status' => 1))
    ->condition('type', 'theme')
    ->condition('name', 'seven')
    ->execute();
  db_update('system')
    ->fields(array('status' => 1))
    ->condition('type', 'theme')
    ->condition('name', 'rubik')
    ->execute();
  variable_set('admin_theme', 'rubik');
  variable_set('node_admin_theme', '1');
}


function mzes_add_default_text_formats_and_perms() {
  // Add text formats.
  $filtered_html_format = array(
    'format' => 'filtered_html',
    'name' => 'Filtered HTML',
    'weight' => 0,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // HTML filter.
      'filter_html' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 2,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  $filtered_html_format = (object) $filtered_html_format;
  filter_format_save($filtered_html_format);

  $full_html_format = array(
    'format' => 'full_html',
    'name' => 'Full HTML',
    'weight' => 1,
    'filters' => array(
      // URL filter.
      'filter_url' => array(
        'weight' => 0,
        'status' => 1,
      ),
      // Line break filter.
      'filter_autop' => array(
        'weight' => 1,
        'status' => 1,
      ),
      // HTML corrector filter.
      'filter_htmlcorrector' => array(
        'weight' => 10,
        'status' => 1,
      ),
    ),
  );
  $full_html_format = (object) $full_html_format;
  filter_format_save($full_html_format);
  
  // Enable default permissions for system roles.
  $filtered_html_permission = filter_permission_name($filtered_html_format);
  user_role_grant_permissions(DRUPAL_ANONYMOUS_RID, array('access content', 'access comments', $filtered_html_permission));
  user_role_grant_permissions(DRUPAL_AUTHENTICATED_RID, array('access content', 'access comments', 'post comments', 'skip comment approval', $filtered_html_permission));

  // Create a default role for site administrators, with all available permissions assigned.
  $admin_role = new stdClass();
  $admin_role->name = 'administrator';
  $admin_role->weight = 2;
  user_role_save($admin_role);
  user_role_grant_permissions($admin_role->rid, array_keys(module_invoke_all('permission')));
  // Set this as the administrator role.
  variable_set('user_admin_role', $admin_role->rid);

  // Assign user 1 the "administrator" role.
  db_insert('users_roles')
    ->fields(array('uid' => 1, 'rid' => $admin_role->rid))
    ->execute();
}

// /**
//  * Helper function to pre-configure Secure Pages settings. It 
//  * checks to see if the module exists, and then checks to make 
//  * sure that SSL is configured for this server. If so, then it
//  * sets the appropriate default system variables.
//  */
// function mzes_configure_securepages() {
//   return;
//   if (function_exists('securepages_test')) {
//     if (securepages_test()) {
//       variable_set('securepages_enable', '0');
//       variable_set('securepages_basepath', '');
//       variable_set('securepages_basepath_ssl', '');
//       variable_set('securepages_ignore', SECUREPAGES_IGNORE);
//       variable_set('securepages_pages', SECUREPAGES_PAGES);
//       variable_set('securepages_secure', '1');
//       variable_set('securepages_switch', TRUE);
//       variable_set('https', TRUE);
//     }
//   }
// }
// 
// function mzes_configure_commentnotify() {
//   $content_types = array_combine(array_keys(node_type_get_types()), array_keys(node_type_get_types()));
//   variable_set('comment_notify_node_types', $content_types);
// }
// 
// function mzes_install_tasks() {
//   $task['secure_pages'] = array(
//     'display_name' => st('Install configurations for Secure Pages'),
//     'display' => FALSE,
//     'type' => 'normal',
//     'run' => INSTALL_TASK_RUN_IF_REACHED,
//     'function' => 'mzes_configure_securepages',
//   );
//   $task['comment_notify'] = array(
//     'display_name' => st('Install configurations for Comment Notify'),
//     'display' => FALSE,
//     'type' => 'normal',
//     'run' => INSTALL_TASK_RUN_IF_REACHED,
//     'function' => 'mzes_configure_commentnotify',
//   );
//   return $task;
// }

/**
* A trick to enforce page refresh when theme is changed from an overlay. Courtesy of OpenPublic Distro.
*/
function mzes_admin_paths_alter(&$paths) {  
  $paths['admin/appearance/default*'] = FALSE;
}

